/**
 * Script pour g√©n√©rer des composants UI modernes en utilisant l'API 21st.dev
 * 
 * Ce script recherche et g√©n√®re des composants UI modernes pour Genius AD District
 * en utilisant l'API 21st.dev.
 * 
 * Usage: 
 * npx ts-node src/scripts/generate-ui-components.ts
 */

import twentyFirstAPI, { SearchResult } from '../lib/21st-api';
import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

// Configuration
const UI_COMPONENTS_DIR = path.join(process.cwd(), 'src/components/ui');
const SECTIONS_COMPONENTS_DIR = path.join(process.cwd(), 'src/components/sections');

/**
 * Cr√©e le r√©pertoire s'il n'existe pas
 */
function ensureDirExists(dir: string): void {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
}

/**
 * Extrait le code TSX depuis le prompt g√©n√©r√©
 */
function extractCodeFromPrompt(prompt: string): { componentCode: string, demoCode?: string } {
  const componentMatch = prompt.match(/```tsx\ncomponent\.tsx\n([\s\S]*?)(?:```|demo\.tsx)/);
  const demoMatch = prompt.match(/demo\.tsx\n([\s\S]*?)```/);

  return {
    componentCode: componentMatch ? componentMatch[1] : '',
    demoCode: demoMatch ? demoMatch[1] : undefined
  };
}

/**
 * Enregistre le composant dans le r√©pertoire appropri√©
 */
function saveComponent(componentName: string, code: string, isSection: boolean = false): void {
  const dir = isSection ? SECTIONS_COMPONENTS_DIR : UI_COMPONENTS_DIR;
  ensureDirExists(dir);
  
  const fileName = `${componentName.replace(/\s+/g, '-').toLowerCase()}.tsx`;
  const filePath = path.join(dir, fileName);
  
  fs.writeFileSync(filePath, code);
  console.log(`‚úÖ Composant enregistr√© : ${filePath}`);
}

/**
 * Installe les d√©pendances n√©cessaires si mentionn√©es dans le prompt
 */
function installDependencies(prompt: string): void {
  const installCommandMatch = prompt.match(/```bash\n(npm|yarn|pnpm|npx)[\s\S]*?```/);
  
  if (installCommandMatch) {
    const installCommand = installCommandMatch[0]
      .replace(/```bash\n/, '')
      .replace(/```/, '')
      .trim();
      
    console.log(`üì¶ Installation des d√©pendances avec : ${installCommand}`);
    try {
      execSync(installCommand, { stdio: 'inherit' });
      console.log('‚úÖ D√©pendances install√©es avec succ√®s');
    } catch (error) {
      console.error('‚ùå Erreur lors de l\'installation des d√©pendances:', error);
    }
  }
}

/**
 * Traite un r√©sultat de recherche pour g√©n√©rer et enregistrer le composant
 */
async function processSearchResult(result: SearchResult, isSection: boolean = false): Promise<void> {
  try {
    console.log(`üîç Traitement du composant : ${result.component_data.name}`);
    
    // G√©n√®re le prompt pour le composant
    const promptResponse = await twentyFirstAPI.getComponentPrompt(result.demo_id);
    
    // Extrait le code du composant et de la d√©mo
    const { componentCode, demoCode } = extractCodeFromPrompt(promptResponse.prompt);
    
    if (!componentCode) {
      console.error('‚ùå Impossible d\'extraire le code du composant depuis le prompt');
      return;
    }
    
    // Sauvegarde le composant
    saveComponent(result.component_data.name, componentCode, isSection);
    
    // Si une d√©mo est disponible, la sauvegarde √©galement
    if (demoCode) {
      saveComponent(`${result.component_data.name}-demo`, demoCode, true);
    }
    
    // Installe les d√©pendances n√©cessaires
    installDependencies(promptResponse.prompt);
    
  } catch (error) {
    console.error(`‚ùå Erreur lors du traitement du composant ${result.component_data.name}:`, error);
  }
}

/**
 * Fonction principale
 */
async function main(): Promise<void> {
  try {
    console.log('üöÄ D√©marrage de la g√©n√©ration des composants UI...');
    
    // Recherche des composants
    console.log('üîç Recherche de composants hero section...');
    const heroSectionResponse = await twentyFirstAPI.searchHeroSection();
    
    console.log('üîç Recherche de composants company showcase...');
    const companyShowcaseResponse = await twentyFirstAPI.searchCompanyShowcase();
    
    console.log('üîç Recherche de composants navigation...');
    const navigationResponse = await twentyFirstAPI.searchNavigation();
    
    // Affiche les m√©tadonn√©es
    console.log(`‚ÑπÔ∏è Plan: ${heroSectionResponse.metadata.plan}`);
    console.log(`‚ÑπÔ∏è Requ√™tes restantes: ${heroSectionResponse.metadata.requests_remaining}`);
    
    // Traite les r√©sultats
    if (heroSectionResponse.results.length > 0) {
      await processSearchResult(heroSectionResponse.results[0], true);
    }
    
    if (companyShowcaseResponse.results.length > 0) {
      await processSearchResult(companyShowcaseResponse.results[0], true);
    }
    
    if (navigationResponse.results.length > 0) {
      await processSearchResult(navigationResponse.results[0], false);
    }
    
    console.log('‚úÖ G√©n√©ration des composants UI termin√©e !');
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la g√©n√©ration des composants UI:', error);
  }
}

// Ex√©cute la fonction principale
main();
